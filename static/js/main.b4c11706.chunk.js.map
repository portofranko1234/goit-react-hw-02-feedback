{"version":3,"sources":["Components/Notification/Notification.jsx","Components/Statistics/Statistics.jsx","Components/FeedbackOptions/FeedbackOptions.jsx","Components/Section/Section.jsx","Components/App.js","index.js"],"names":["Notification","message","defaultProps","Statistics","good","bad","neutral","total","percentage","positivePercentage","FeedbackOptions","onLeaveFeedback","type","name","onClick","Section","title","children","className","App","state","handleIncrement","event","setState","prevState","target","this","Math","round","totalFeedbackCounter","totalFeedbacks","positiveFeedbackPercentageCounter","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAGA,SAASA,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,4BAAIA,IAEED,QACfA,EAAaE,aAAe,CAC1BD,QAAS,oBCJX,IAAME,EAAa,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,IAAKC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAC/C,OACE,8BACGD,EAAQ,EACP,+BACE,wCAAWH,KACX,2CAAcE,KACd,uCAAUD,KACV,yCAAYE,KACZ,qDAAwBC,EAAxB,UAGF,cAAC,EAAD,CAAcP,QAAQ,yBAMfE,IAEfA,EAAWD,aAAe,CACxBE,KAAM,EACNC,IAAK,EACLE,MAAO,EACPD,QAAS,EACTG,mBAAoB,GC1BtB,IAgBeC,EAhBS,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACzB,OACE,gCACE,wBAAQC,KAAK,SAASC,KAAK,OAAOC,QAASH,EAA3C,kBAGA,wBAAQC,KAAK,SAASC,KAAK,UAAUC,QAASH,EAA9C,qBAGA,wBAAQC,KAAK,SAASC,KAAK,MAAMC,QAASH,EAA1C,qBCTN,SAASI,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,0BAASC,UAAU,UAAnB,UACGF,GAAS,oBAAIE,UAAU,eAAd,SAA8BF,IACvCC,KAIPF,EAAQb,aAAe,CAAEc,MAAO,IAEjBD,QCsCAI,E,4MA7CbC,MAAQ,CAAEhB,KAAM,EAAGE,QAAS,EAAGD,IAAK,G,EAEpCgB,gBAAkB,SAACC,GACjB,EAAKC,UAAS,SAACC,GACb,OAAO,eAAGF,EAAMG,OAAOZ,KAAOW,EAAUF,EAAMG,OAAOZ,MAAQ,O,0DAGjE,WACE,MAA+Ba,KAAKN,MAC9Bb,EADN,EAAQH,KAAR,EAAcE,QAAd,EAAuBD,IAEvB,OAAOE,GAAgB,I,+CAGzB,WACE,IAAQH,EAASsB,KAAKN,MAAdhB,KAER,OADmBuB,KAAKC,MAAOxB,EAAOsB,KAAKG,uBAA0B,O,oBAIvE,WACE,MAA+BH,KAAKN,MAA5BhB,EAAR,EAAQA,KAAME,EAAd,EAAcA,QAASD,EAAvB,EAAuBA,IAEjByB,EAAiBJ,KAAKG,uBACtBpB,EAAqBiB,KAAKK,oCAChC,OACE,gCACE,cAAC,EAAD,CAASf,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBL,gBAAiBe,KAAKL,oBAEzC,cAAC,EAAD,CAASL,MAAM,aAAf,SAEI,cAAC,EAAD,CACEZ,KAAMA,EACNE,QAASA,EACTD,IAAKA,EACLE,MAAOuB,EACPtB,WAAYC,a,GArCRuB,aCAlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b4c11706.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Notification({ message }) {\r\n  return <p>{message}</p>;\r\n}\r\nexport default Notification;\r\nNotification.defaultProps = {\r\n  message: \"No message value\",\r\n};\r\nNotification.propTypes = { message: PropTypes.string };\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Notification from \"../Notification\";\r\n\r\nconst Statistics = ({ good, bad, neutral, total, percentage }) => {\r\n  return (\r\n    <div>\r\n      {total > 0 ? (\r\n        <ul>\r\n          <li>Good: {good}</li>\r\n          <li>Neutral: {neutral}</li>\r\n          <li>Bad: {bad}</li>\r\n          <li>Total: {total}</li>\r\n          <li>Positive feedback: {percentage}%</li>\r\n        </ul>\r\n      ) : (\r\n        <Notification message=\"No feedback given\" />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n\r\nStatistics.defaultProps = {\r\n  good: 0,\r\n  bad: 0,\r\n  total: 0,\r\n  neutral: 0,\r\n  positivePercentage: 0,\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  positivePercentage: PropTypes.number,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FeedbackOptions = ({ onLeaveFeedback }) => {\r\n  return (\r\n    <div>\r\n      <button type=\"button\" name=\"good\" onClick={onLeaveFeedback}>\r\n        Good\r\n      </button>\r\n      <button type=\"button\" name=\"neutral\" onClick={onLeaveFeedback}>\r\n        Neutral\r\n      </button>\r\n      <button type=\"button\" name=\"bad\" onClick={onLeaveFeedback}>\r\n        Bad\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FeedbackOptions;\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <section className=\"section\">\r\n      {title && <h2 className=\"sectionTitle\">{title}</h2>}\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\nSection.defaultProps = { title: \"\" };\r\n\r\nexport default Section;\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n","import { Component } from \"react\";\nimport Statistics from \"./Statistics\";\nimport FeedbackOptions from \"./FeedbackOptions\";\nimport Section from \"./Section\";\n\nclass App extends Component {\n  state = { good: 0, neutral: 0, bad: 0 };\n\n  handleIncrement = (event) => {\n    this.setState((prevState) => {\n      return { [event.target.name]: prevState[event.target.name] + 1 };\n    });\n  };\n  totalFeedbackCounter() {\n    const { good, neutral, bad } = this.state;\n    const total = good + neutral + bad;\n    return total ? total : 0;\n  }\n\n  positiveFeedbackPercentageCounter() {\n    const { good } = this.state;\n    const percentage = Math.round((good / this.totalFeedbackCounter()) * 100);\n    return percentage;\n  }\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    const totalFeedbacks = this.totalFeedbackCounter();\n    const positivePercentage = this.positiveFeedbackPercentageCounter();\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions onLeaveFeedback={this.handleIncrement} />\n        </Section>\n        <Section title=\"Statistics\">\n          {\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={totalFeedbacks}\n              percentage={positivePercentage}\n            />\n          }\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from './Components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}